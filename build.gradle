plugins {
    id "com.github.hierynomus.license" version "0.15.0"
    id "com.github.hierynomus.jython" version "0.11.0"
    id "com.xebialabs.xl.docker" version "1.1.0"
    id "nebula.release" version "8.0.0"
    id "com.github.ben-manes.versions" version "0.22.0"
}

apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'maven'

xlDocker {
  compileImage = 'xebialabsunsupported/xlr_dev_compile'
  compileVersion = '8.2.0-1'
  runImage = 'xebialabsunsupported/xlr_dev_run'
  runVersion = '8.2.0-1'
  runPortMapping = '15516:5516'
}

if (!project.hasProperty('release.scope')) {
  project.ext['release.scope'] = 'patch'
}

if (!project.hasProperty('release.useLastTag')) {
  project.ext['release.useLastTag'] = true
}


dependencies {
    jython ":delphixpy:1.10.0.0"
}

if (!project.hasProperty('jythonInterpreter')) {
  project.ext['jythonInterpreter'] = "jython"
}

// sourceSets.main.resources.srcDirs = ["src/main/jython", "src/main/resources"]
// sourceSets.test.resources.srcDirs = ["src/test/jython", "src/test/resources"]


task testJython(type: Exec, dependsOn: ['testClasses']) {
  def classpath = sourceSets.main.runtimeClasspath.asPath + ":$projectDir/build/jython/main:$projectDir/src/main/resources"
  environment = ["itest_conf_file": "$projectDir/src/test/jython/itests/itest-conf.json","CLASSPATH": classpath, "PATH": System.getenv("PATH"), "HOME": System.getenv("HOME")]
  commandLine jythonInterpreter, "-m", "unittest", "discover", "-s", "./src/test/jython", "-p", "*_test.py", "-v"
  workingDir = projectDir
}

// test.dependsOn testJython

license {
    header rootProject.file('License.md')
    strictCheck true
    excludes(["**/*.json", "**/requests/*", "**/responses/**", "**/logback-test.xml", "**/build/jython/**", "**/delphixpy/**"])
    ext.year = Calendar.getInstance().get(Calendar.YEAR)
    ext.name = 'XEBIALABS'
}


